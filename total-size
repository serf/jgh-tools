#!/usr/bin/perl -w
#
# John Harrison
#
use strict;
use Getopt::Long;

my $opt;

GetOptions (
    "du"        => \$opt->{du},
    "duk"       => \$opt->{duk},
    "lsh"       => \$opt->{lsh},
    "find"      => \$opt->{find},
    "numeric"   => \$opt->{numeric},
    "as=s"      => \$opt->{as},
    "units=s"   => \$opt->{units},
    "column=s"  => \$opt->{column},
    "display=s" => \$opt->{display},
    "verbose"   => \$opt->{verbose},
    "help"      => \$opt->{usage},
    "usage"     => \$opt->{usage},
)
or die("$0: ERROR: invalid command line arguments\n");

sub usage () {

    die <<EOT;
Usage: $0 -as=[b|k|m|g] [-column=COLUMN] -[f|n|c COL] -[i 512|kb] [-usage] [-verbose]
Where:
  -as:
    b - Show total as bytes
    k - Show total as kilobytes
    m - Show total as megabytes
    g - Show total as gigabytes

Default output is as the most appropriate units for the size.

  -column=COL - Sum column COL

Default column is 5, to sum the output of 'ls -l'

  -units=UNITS -  Input units [512 or kb]

  -find    - Sum 7th column (find -ls format)
  -numeric - Sum 1st column (list of numbers)
  -du      - Sum 1st column (numbers with G,M,K - du -sh output)
  -duk     - Sum 1st column (numbers in KB - do -sk output)
  -lsh     - Sum 5th column, but with G,M,K

  -help    - show this help
  -verbose - show verbose output

EOT

}
usage if $opt->{usage};

my $div = {
    b => 1,
    k => 1024,
    m => 1048576,    # 1024 ** 2
    g => 1073741824, # 1024 ** 3
    kb => 1024,
    mb => 1048576,
    gb => 1073741824,
};

my $total = 0;
my $col = 4;
my $car = '-';

# Find format
if ( $opt->{find} ) {
   $col = 6;
   $car = '[0-9]';
} elsif ( $opt->{column} ) {
   $col = $opt->{column} -1;
   $car = '.';
} elsif ( $opt->{numeric} ) {
   $col = 0;
   $car = '[0-9]';
} elsif ( $opt->{du} ) {
   $col = 0;
   $car = '[0-9]';
}

my $ip = 1;
if ( $opt->{units} ) {
    if ( $opt->{units} =~ /^\d+$/ ) {
        $ip = $opt->{units}; 
    } else {
        for my $m ( keys ( %{$div} ) ) {
            if ( $opt->{units} eq $m ) {
                $ip = $div->{$m};
            }
        }
    }
}

sub in_kb($$) {
    my ($num, $units) = (shift, shift);
    for my $mult qw(g m k b) {
        if ( lc($units) eq $mult ) {
            return $num * $div->{$mult};
        }
    }
    return -1;

}

LINE: while (defined (my $line = <>)) {

    next if $line !~ /\d+/;
    $line =~ s/^\s+//g;
    chomp $line;
    my @line = split(/\s+/,$line);
    if ( $opt->{find} ) {
        next if $line[6] !~ /(\d+)/;
        $total += $line[6];
    } elsif ( $opt->{du} ) {
        if ( $line[0] =~ /^([\d\.]+)([GMK])/ ) {
            $total += in_kb($1, $2);
        } elsif ( $line[0] =~ /^\d+$/ ) {
            $total += in_kb($1, 'K');
        } else {
            print "Bad line? [$line[0]]\n";
        }
        next LINE;
    } elsif ( $opt->{duk} ) {
        if ( $line[0] =~ /^\d+$/ ) {
            $total += in_kb($line[0], 'k');
        } else {
            print "Bad line? [$line[0]]\n";
        }
        next LINE;
    } elsif ( $opt->{lsh} ) {
        if ( $line[4] =~ /^([\d\.]+)([GMK])/ ) {
            $total += in_kb($1, $2);
        } else {
            print "Bad line? [$line[0]]\n";
        }
        next LINE;
    } else {
        # Default to 'ls' output.
        next LINE if $#line < 8;
        if ( $line[4] !~ /(\d+)/ ) {
            print "Bad line? [$line]\n";
            next LINE;
        }
        $total += $line[4];
        next LINE;
    }

}

sub show($) {

    my $unit = shift;

    if ( $total % $div->{$unit} ) {
        printf "%.1f %s\n", $total / $div->{$unit}, uc($unit);
    }
    else {
        printf "%d %s\n", $total / $div->{$unit}, uc($unit);
    }
    exit 0;

}

for my $mult qw(g m k b) {

    if ( $opt->{as} && $opt->{as} eq $mult ) {
        show($mult);
    }

}

for my $mult qw(g m k) {

    if ( $total > $div->{$mult} ) {
        show($mult);
    }

}

