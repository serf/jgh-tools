#!/usr/bin/perl
#
#
#
use warnings;
use strict;
use Getopt::Long;

my $opt;

GetOptions (
    "reverse"   => $opt->{reverse},
    "verbose"   => $opt->{verbose},
    "help"      => $opt->{usage},
    "usage"     => $opt->{usage},
    "netbackup" => $opt->{netbackup},
    "ls"        => $opt->{ls},
    "find"      => $opt->{find},
    "nodate"    => $opt->{nodate},
    "day=s"   => $opt->{day},
    "month=s"   => $opt->{month},
    "year=s"   => $opt->{year},
)
or die("$0: ERROR: invalid command line arguments\n");

sub usage () {

    die <<EOT;
Usage: $0 [-usage] [-verbose] ARGUMENT
  where
    -help      - show this help
    -verbose   - show verbose output
    -netbackup - netbackup bplist format
    -ls        - ls -l format
    -find      - find -ls format
    -reverse   - sort dates in reverse
    -nodate    - do not print date on each day's files.
EOT

}
usage if $opt->{usage};

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)
    = gmtime(time);

my @mon  = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
my %mon; @mon{@mon} = (0..11);

my $this_year = $year + 1900;

=input examples
find -ls
12345678 12345 drwxr-xr-x   1 owner group    0 Jan 02  2013 path/to/file.txt
93970  6190210 -rw-r--r--   1 owner    group    6334401269 May 26 04:40 path/to/file.txt
7 8 9
--
ls -l
drwxr-xr-x 1 owner group 0 Jan 02  2013 path/to/file.txt
5 6 7
--
netbackup bplist
drwxr-xr-x owner  group               0 Jan 02  2013 path/to/file.txt
4 5 6
=cut

my $dates;

my $off = 7;
if ( $opt->{find} ) {
    $off = 7;
} elsif ( $opt->{ls} ) {
    $off = 5;
} elsif ( $opt->{netbackup} ) {
    $off = 4;
} elsif ( $opt->{month} ) {
    $off = $opt->{month};
}

my $dom = $off+1;
my $yt = $off+2;
my $file = $off+3;

if ( $opt->{day} ) {
    $dom = $opt->{day};
}
if ( $opt->{year} ) {
    $yt = $opt->{year};
}


while (defined (my $line = <>)) {

    #
    # Small numbers can have leading zero on Solaris
    #
    $line =~ s/^\s+//g;
    next if $line =~ /^total \d+$/;
    my @line = split(/\s+/, $line);
    if ( $line[$off] !~ /^[A-Z][a-z][a-z]$/ ) {
        chomp $line;
        die "Not in find -ls format: '$line'\n";
    }
    my ($yr, $mn, $dy, $tm);
    $mn = $line[$off];
    $dy = $line[$dom];

    if ( $line[$yt] =~ /^\d\d\d\d$/ ) {
        $yr = $line[$yt];
        $tm = '12:00';
    } elsif ( $line[$yt] =~ /^\d\d:\d\d$/ ) {
        $tm = $line[$yt];
        # It's the start of the year
        # You have files from the last 6 months
        if ( $mon{$mn} > $mon ) {
            $yr = $this_year -1;
        } else {
            $yr = $this_year;
        }
    } else {
        die "Bad time/year field: '$line[$yt]'\n";
    }
    chomp $line;

    @{$dates->{$yr}->{$mn}->{$dy}->{$tm}->{$line[$file]}} = $line;

}

sub order_times ($$) {
    my ($a, $b) = (shift,shift);
    if ( $opt->{reverse} ) {
        return $b cmp $a;
    } else {
        return $a cmp $b;
    }
}

sub order_day ($$) {
    my ($a, $b) = (shift,shift);
    if ( $opt->{reverse} ) {
        return $b <=> $a;
    } else {
        return $a <=> $b;
    }
}

sub order_years ($$) {
    my ($a, $b) = (shift,shift);
    if ( $opt->{reverse} ) {
        return $b <=> $a;
    } else {
        return $a <=> $b;
    }
}

for my $yr ( sort order_years keys %{$dates} ) {
    for my $mn ( @mon ) {
        if ( defined $dates->{$yr}->{$mn} ) {
            for my $dy ( sort order_day keys %{$dates->{$yr}->{$mn}} ) {
                print "$yr-$mn-$dy:\n" if ! $opt->{nodate};
                for my $tm ( sort order_times keys %{$dates->{$yr}->{$mn}->{$dy}} ) { # Times
                    for my $file ( sort keys %{$dates->{$yr}->{$mn}->{$dy}->{$tm}} ) {
                        print ${$dates->{$yr}->{$mn}->{$dy}->{$tm}->{$file}}[0], $/;
                    }
                }
            }
        }
    }
}

