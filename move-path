#!/usr/bin/perl
#
# Move a file to the same subdirectory path under target dir.
#
use warnings;
use strict;
use File::Copy; # For 'move' command
use Getopt::Long;
use File::Basename;
use File::Path qw(mkpath);

my $opt;

GetOptions (
    "verbose"  => \$opt->{verbose},
    "help"     => \$opt->{usage},
    "usage"    => \$opt->{usage},
    "symlinks" => \$opt->{symlinks},
)
or die("\$0: ERROR: invalid command line arguments\n");

sub usage () {

    die <<EOT;
Usage: \$0 [-usage] [-verbose] [SOURCE_FILE] TARGET_DIR
  where
    -symlinks - move symlinks too
    -help     - show this help
    -verbose  - show verbose output

Reads list from STDIN if SOURCE_FILE is not specified.
EOT

}
usage if $opt->{usage};

sub VERBOSE { $opt->{verbose} }

sub move_path ($$) {
    my ($source, $target) = (shift, shift);
    usage if ! $target;
    die "$0: ERROR: Target directory '$target' does not exist!\n" if ! -e $target;
    die "$0: ERROR: Target '$target' is not a directory!\n" if ! -d $target;
    $target =~ s/\/+$//g;

    if ( -f $source ) {
        VERBOSE && print "Source '$source' is a regular file.\n";
    } elsif ( -d $source ) {
        opendir(my $dir_fh, $source) || die "$0: Can't opendir '$source': $!\n";
        while (my $file = readdir $dir_fh) {
            next if ($file eq "." or $file eq "..");
            die "$0: Can't move '$source' - directory is not empty. (found '$file')\n";
        }
        closedir $dir_fh;
        if ( -d "$target/$source" ) {
            print "Target '$target/$source' already exists. Removing source dir '$source'.\n";
            rmdir($source) or die "Can't rmdir '$source': $!\n";
            return;
        } else {
            # move falls over on empty directories, so we will try and make a copy ourselves.
            my $res = mkdir("$target/$source");
            # if the path to the directory doesn't exist, make it dir by dir.
            if ( $res == 0 ) {
                my @bits = split('/', "$target/$source");
                my $path = shift(@bits);
                for my $bit ( @bits ) {
                    $path = "$path/$bit";
                    if ( ! -d $path ) {
                        mkdir ($path) or die "I can't mkdir '$path': $!\n";
                    }
                }
            }
            my @stat = stat($source) or die "Can't stat '$source': $!\n"; 
            chown ($stat[4], $stat[5], "$target/$source") or die "Can't chown $stat[4]:$stat[5] '$target/$source': $!\n";
            my $mode = sprintf "%o", 07777 & $stat[2];
            chmod ($mode, "$target/$source") or die "Can't chmod $mode '$target/$source': $!\n";
            rmdir($source) or die "Can't rmdir '$source': $!\n";
            print "'$source' -> '$target/$source'\n";
            return;
        }
    } elsif ( -l $source ) {
        if ( ! $opt->{symlinks} ) {
            print "Skipping '$source' - is a symlink.\n";
            return;
        }
    } elsif ( -e $source ) {
        print "Skipping '$source' - Not a regular file.\n";
        return;
    } else {
        die "$0: ERROR: '$source' not found: $!\n";
    }

    VERBOSE && print "Want to move '$source' to '$target/$source'\n";

    my($file, $dirs, $suffix) = fileparse($source);
    if ( ! -d "$target/$dirs" ) {
        mkpath("$target/$dirs")
            or die "$0: ERROR: Can't mkpath '$target/$dirs': $!\n";
    }

    if ( -e "$target/$source" ) {
        die "$0: Can't move '$source' to '$target/$source' - target already exists.\n";
    }

    move ($source, "$target/$source") or die "$0: ERROR: Can't move '$source' to '$target/$source': $!\n";
    print "'$source' -> '$target/$source'\n";
}

if ( $#ARGV == 1 ){
    my ($source_file, $target_dir) = (shift, shift);
    move_path($source_file, $target_dir);
} elsif ( $#ARGV == 0 ) {
    my ($target_dir) = (shift);
    VERBOSE && print "Reading list from STDIN.\n";
    my %to_move;
    while (defined (my $line = <>)) {
        chomp $line;
        # Make it unique
        $to_move{$line} = 1;
    }
    for my $source_file (sort {$b cmp $a} keys %to_move) {
        # Reverse sort, so parent directory comes last. 
        move_path($source_file, $target_dir);
    }
} else {
    usage;
}

