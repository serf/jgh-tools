#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Std;

my $gen_len = 10; # Generated password length
my $crypted_pass = "*LK*";
my $plaintext;
my %opts; my $opts = \%opts;

getopts('sl:cvrmnh', $opts);

die <<EOT if $opts->{h};
Usage: $0 [opts]
 -s - Strong password (15 characters, full printable ASCII set)
 -l - Length (requires the number of characters as an argument)
 -c - Show MD5 crypted pass as well
 -v - Verbose (show description of output)
 -r - Also show the range of possible characters
 -m - Medium password (Add a few non-alphanumeric characters)
 -n - Show the range with character numbers
 -h - Show this help screen

EOT

my $range;
@{$range->{a}} = ('a'..'z'); # 97-122
@{$range->{A}} = ('A'..'Z'); # 65-90
@{$range->{n}} = (0..9); # 48-57

my @salt = ('.','/');
my @ranges = ('a', 'A', 'n'); # Ranges to use for validation

my @schars = (@{$range->{a}}, @{$range->{A}}, @{$range->{n}}, @salt);

my $salt = '';
for (1..8) {
    $salt .= $schars[int(rand($#schars))];
}

my @range = (50..57, 65..72, 74..78, 80..90, 97..107, 109..122);

if ( $opts->{m} ) {

    $gen_len = 12;
    my @med = ( 35, 37, 43, 45, 46, 47, 58, 61, 64, 95 );
    push ( @range, @med );
    for my $m ( @med ) {
        push @{$range->{m}}, chr($m);
    }
    push ( @ranges, 'm' ); # Also validate medium complexity characters

}

# Strong password
if ( $opts->{s} ) {

    $gen_len = 15;
    my @punc = (32..47,58..64,91..96,123..126);
    @range = (32 .. 126);
    for my $p ( @punc ) {
        push @{$range->{p}}, chr($p);
    }
    push ( @ranges, 'p' ); # Also validate punctuation characters

}

my @chars;
for my $char (@range) {
    push @chars, chr($char);
}

if ( $opts->{l} ) {
    $gen_len = $opts->{l};
}

sub gen_ck () {

    for (1..$gen_len) {
        $plaintext .= $chars[int(rand($#chars))];
    }
    my @plaintext = split(//, $plaintext );

    my $ok;

    RANGE: for my $r ( @ranges ) {

        $ok->{$r} = 0;

        for my $chr ( @{$range->{$r}} ) {

            for my $place ( @plaintext ) {

                if ( $place eq $chr ) {
                    $ok->{$r} = 1;
                    next RANGE;
                }

            }

        }

        #
        # If the password doesn't have one of each set
        # Throw it away & return empty handed.
        #

        if ( ! $ok->{$r} ) {

            undef $plaintext;
            undef @plaintext;
            return 1;

        }

    }

    #
    # If our password has any repeated characters
    # Throw it away & return empty handed.
    #

    for my $p ( 0 .. $#plaintext ) {

        if ( $plaintext[$p] eq $plaintext[$p-1] ) {
            # print "\nGot $plaintext Recalculating...\n";
            undef $plaintext;
            return 1;
        }
    }

}

while ( ! defined $plaintext ) {
    gen_ck;
}

print "New password: " if $opts->{v};

print "$plaintext\n";

if ( $opts->{c} ) {

    print "Crypted pass: " if $opts->{v};
    $crypted_pass = crypt($plaintext,'$1$' . $salt )
        or die($!);

    print "$crypted_pass\n";

}

if ( $opts->{n} ) {
    for my $i ( @range ) {
        print "$i ", chr($i), $/;
    }
}

if ( $opts->{r} ) {
    for my $i ( @range ) {
        print chr($i);
    }
    print $/;
}

=To do next:

Generate the text in chunks (12 characters?)
so that long passwords don't need to re-calc
the whole thing when part is rejected.

=cut

